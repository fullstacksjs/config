{"/config":{"title":"Config","data":{"constructor#Constructor":"Creates a new configuration instance based on the provided schema.","parameters#Parameters":"schema: A schema object that defines the configuration schema using the provided methods.","example#Example":"const config = new Config({\n  port: Config.string(),\n  nested: Config.object({\n    foo: Config.string(),\n  }),\n})","parse#parse":"Parses and validate the configuration against the schema.","parameters-1#Parameters":"config: An object containing the configuration values to be parsed.","example-1#Example":"config.parse({ port: 3000, nested: { foo: 'bar' } })","get#get":"Retrieves the value of a specific configuration key.","parameters-2#Parameters":"path: The configuration key to retrieve.","example-2#Example":"config.get('port') // 3000\nconfig.get('nested.foo') // bar","getall#getAll":"Returns an object containing all configuration values.","example-3#Example":"config.getAll('port') // { port: 3000, nested: { foo: 'bar' } }"}},"/getting-started":{"title":"Getting Started","data":{"installation#Installation":"","node#Node":"Install the package using package managers:npm\nnpm install @fullstacksjs/config\npnpm\npnpm add @fullstacksjs/config\nyarn\nyarn add @fullstacksjs/config","deno#Deno":"import { Config } from 'https://raw.githubusercontent.com/fullstacksjs/config/main/mod.ts';","browser-esm#Browser ESM":"<script type=\"module\">\n  import { Config } from 'https://www.unpkg.com/@fullstacksjs/config@<VERSION>/lib/esm/index.js';\n</script>","usage#Usage":"Start by importing the Config and define your configuration schema.\nThis schema represents the structure and rules of your application's configuration.\nimport { Config } from '@fullstacksjs/config';\nconst schema = new Config({\n  port: Config.number({ default: 3000 }),\n  host: Config.string({ default: 'localhost' }),\n  token: Config.string(),\n  featureX: Config.boolean({ default: true }),\n  scope: Config.object({\n    nested: Config.string()\n  }),\n  urls: Config.array(Config.string()),\n});\nconst config = schema.parse({\n  port: '4200',\n  token: 'TOKEN',\n  host: undefined,\n  featureX: false,\n  scope: {\n    nested: 'nested'\n  },\n  urls: ['http', 'https'],\n})\nconfig.get('port'); // 4200\nconfig.get('host'); // 'localhost'\nconfig.get('scope.nested'); // 'nested'\nconfig.get('urls'); // ['http', 'https']\nconst { port, token, host, featureX, scope, urls } = config.getAll();"}},"/":{"title":"Introduction","data":{"":"A zero-dependency 📦, type-safe 🚧, simple yet powerful library\nfor defining and accessing configuration.","why-config#Why Config?":"📦️ Zero-dependencies: Fully-tested standalone solution, zero maintenance cost.\n🛟 Fail Fast: Application starts only if configurations are correct, ensuring high reliability.\n🎛 Type-safety: Runtime schema parsing allows for complete TypeScript type inference.\n🏗️ Modern: Compatible with ESM, Deno, NodeJS, Bun, and browsers.\n🧪 Fully tested: Comprehensive unit tests cover all functionalities, ensuring robustness.\n🔌 Technlogy-Agnostic: Not Coupled to any Runtime or Framework."}},"/schema/array":{"title":"Array","data":{"":"Defines an array schema.","parameters#Parameters":"schema: Schema","example#Example":"const arraySchema = Config.array(Config.string()); // stirng[]\nCaution:\nInner schema is alwayas required!\nCaution:\nInner schema coercion is false by default!","coercion#Coercion":"Coercion is disabled for array."}},"/schema/boolean":{"title":"Boolean","data":{"":"Defines a boolean schema.","parameters#Parameters":"options: Schema Options","example#Example":"const booleanSchema = Config.boolean(schemaOptions);","methods#Methods":"","required#required":"Mark schema as required.\nconst config = new Config({\n  password: Config.boolean().required(),\n});\nconfig.parse({ password: undefined }) // Invalid configuration: The \"password\" is required but the given value is \"undefined\"","coercion#Coercion":"When the value is string, it coerces '0' or 'false' to false (case-insensitve), otherwise to passes it to the Boolean function.\nconst coercion = value => {\n  const falseRegex = /(false|0)/i;\n  return typeof value === 'string'\n    ? !falseRegex.test(value)\n    : Boolean(value);\n}"}},"/schema/number":{"title":"Number","data":{"":"Defines a number schema.","parameters#Parameters":"options: Schema Options","example#Example":"const numberSchema = Config.number(schemaOptions);","methods#Methods":"","min#min":"Defines minimum valid value (inclusive).\nconst config = new Config({\n  age: Config.number().min(18),\n});\nconfig.parse({ age: 10 }) // Invalid configuration: The \"age\" expected to be more than or equal to \"18\" but \"10\" was provided',","min-1#min":"Defines maximum valid value (inclusive).\nconst config = new Config({\n  age: Config.number().max(20),\n});\nconfig.parse({ age: 22 }) // Invalid configuration: The \"age\" expected to be less than or equal to \"20\" but \"22\" was provided',","required#required":"Mark schema as required.\nconst config = new Config({\n  password: Config.number().required(),\n});\nconfig.parse({ password: undefined }) // Invalid configuration: The \"password\" is required but the given value is \"undefined\"","coercion#Coercion":"const coercion = value => Number(value)"}},"/schema/object":{"title":"Object","data":{"":"Defines an object schema.","parameters#Parameters":"schema: Record<string, Schema>","example#Example":"const objectSchema = Config.object({\n  foo: Config.string(),\n  nested: Config.object({\n    bar: Config.boolean().required(),\n  }),\n});\n/*\n{\n  foo: string | undefined,\n  nested: {\n    bar: boolean;\n  }\n}\n*/\nCaution:\nInner schema coercion is false by default!","coercion#Coercion":"Coercion is disabled for object."}},"/schema/string":{"title":"String","data":{"":"Defines a string schema.","parameters#Parameters":"options: Schema Options","example#Example":"const stringSchema = Config.string(schemaOptions);","methods#Methods":"","min#min":"Defines minimum length for the string (inclusive).\nconst config = new Config({\n  password: Config.string().min(4),\n});\nconfig.parse({ password: '123' }) // Invalid configuration: The \"password\" length expected to be more than or equal to \"18\" but \"10\" was provided',","min-1#min":"Defines maximum length for the string (inclusive).\nconst config = new Config({\n  password: Config.string().max(4),\n});\nconfig.parse({ password: '12345' }) // Invalid configuration: The \"password\" length expected to be more than or equal to \"4\" but \"5\" was provided',","required#required":"Mark schema as required.\nconst config = new Config({\n  password: Config.string().required(),\n});\nconfig.parse({ password: undefined }) // Invalid configuration: The \"password\" is required but the given value is \"undefined\"","coercion#Coercion":"const coercion = value => String(value)"}},"/schema":{"title":"Schema","data":{"":"The schema is the core structure used to define the shape and rules of the configuration.","basic-usage#Basic Usage":"import { Config } from '@fullstacksjs/config';\nconst mySchema = {\n  number: Config.number(),\n  string: Config.string(),\n  boolean: Config.boolean(),\n  array: Config.array(Config.string()),\n  object: Config.object({\n    key: Config.string(),\n  }),\n};","schema-options#Schema Options":"Base option for schema definition.","type-definition#Type Definition":"type SchemaOptions<T> = {\n  coerce: boolean\n  default: T\n}","options#Options":"","coerce#coerce":"Controls runtime type coercion. when enabled parser tries to coerce the provided value. (default: true)","example#Example":"const config = new Config({\n  port: Config.number({ coerce: true }),\n});\nconfig.parse({ port: '3000' })\nconfig.get(port) // 3000\ntypeof config.get(port) // \"number\"\nconst config = new Config({\n  port: Config.number({ coerce: false }),\n});\nconfig.parse({ port: '3000' }) // Invalid configuration: The \"port\" expected to be \"number\" but a \"string\" was provided","default#default":"Defines the default value when the value is null or undefined.\nconst config = new Config({\n  port: Config.number({ default: 3000 }),\n});\nconfig.parse({})\nconfig.get(port) // 3000\nconfig.parse({ port: undefined })\nconfig.get(port) // 3000\nconfig.parse({ port: null })\nconfig.get(port) // 3000","schemas#Schemas":""}}}